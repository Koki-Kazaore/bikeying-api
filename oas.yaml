openapi: 3.0.3

info:
  title: Bikeying API
  description: BikeyingサービスのAPI定義書
  version: 1.0.0

servers:
  - url: http://localhost:8000
    description: local development server
  - url: 'https://bikeying.com'
    description: main production server

paths:
  /bikes:
    get:
      parameters:
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum:
              - available
              - in_use
              - maintenance
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
      summary: 自転車の現在の利用ステータスを取得する
      operationId: getBikes
      description: 自転車の現在の利用ステータスを取得する
      responses:
        '200':
          description: A JSON array of bikes
          content:
            application/json:
              schema:
                type: object
                properties:
                  bikes:
                    type: array
                    items:
                      $ref: '#/components/schemas/GetBikeSchema'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'

    post:
      summary: シェアリング可能な自転車を追加する
      operationId: createBike
      requestBody:
        description: 追加する自転車の情報
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBikeSchema'
      responses:
        '201':
          description: A JSON representation of the created bike
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBikeSchema'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'

  /bikes/{bikeId}:
    parameters:
      - in: path
        name: bike_id
        required: true
        schema:
          type: string
          format: uuid

    get:
      summary: 特定の自転車の情報を取得する
      operationId: getBike
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBikeSchema'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'

    put:
      summary: 自転車の現在の利用ステータスを更新する
      operationId: updateBike
      requestBody:
        description: 更新するステータス情報
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBikeSchema'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBikeSchema'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'

    delete:
      summary: 自転車をシェアリングの対象から削除する
      operationId: deleteBike
      responses:
        '204':
          description: The resource was successfully deleted
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'

  # /bikes/dispatch:
  #   get:
  #     summary: ストックされたリクエストから最適な自転車を割り当てる
  #     security:
  #       - BearerAuth: []
  #     responses:
  #       '200':
  #         description: 自転車割り当て成功
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/BikeAssignment'

  # /bikes/request:
  #   post:
  #     summary: ユーザの条件に基づいたリクエストをストックする
  #     security:
  #       - BearerAuth: []
  #     requestBody:
  #       description: リクエスト情報
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/BikeRequest'
  #     responses:
  #       '201':
  #         description: リクエストストック成功

  # /bikes/reserve:
  #   post:
  #     summary: 特定の自転車の利用を確定・予約する
  #     security:
  #       - BearerAuth: []
  #     requestBody:
  #       description: 予約情報
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/BikeReservation'
  #     responses:
  #       '200':
  #         description: 予約成功

  # /users/signup:
  #   post:
  #     summary: 新規ユーザ登録
  #     requestBody:
  #       description: 登録情報
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/UserSignup'
  #     responses:
  #       '201':
  #         description: ユーザ登録成功

  # /users/login:
  #   post:
  #     summary: ユーザのログイン処理
  #     requestBody:
  #       description: ログイン情報
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/UserLogin'
  #     responses:
  #       '200':
  #         description: ログイン成功
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/AuthToken'

  # /users/logout:
  #   post:
  #     summary: ユーザのログアウト処理
  #     security:
  #       - BearerAuth: []
  #     responses:
  #       '200':
  #         description: ログアウト成功

  # /users/{userId}:
  #   get:
  #     summary: ユーザのプロフィール情報を取得する
  #     security:
  #       - BearerAuth: []
  #     parameters:
  #       - name: userId
  #         in: path
  #         required: true
  #         schema:
  #           type: string
  #     responses:
  #       '200':
  #         description: プロフィール取得成功
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/UserProfile'
  #   put:
  #     summary: ユーザのプロフィール情報を更新する
  #     security:
  #       - BearerAuth: []
  #     parameters:
  #       - name: userId
  #         in: path
  #         required: true
  #         schema:
  #           type: string
  #     requestBody:
  #       description: 更新するプロフィール情報
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/UserProfileUpdate'
  #     responses:
  #       '200':
  #         description: プロフィール更新成功

  # /{lockId}/unlock:
  #   post:
  #     summary: 指定されたスマートロックを解錠する
  #     security:
  #       - BearerAuth: []
  #     parameters:
  #       - name: lockId
  #         in: path
  #         required: true
  #         schema:
  #           type: string
  #     responses:
  #       '200':
  #         description: 解錠成功

  # /{lockId}/lock:
  #   post:
  #     summary: 指定されたスマートロックを施錠する
  #     security:
  #       - BearerAuth: []
  #     parameters:
  #       - name: lockId
  #         in: path
  #         required: true
  #         schema:
  #           type: string
  #     responses:
  #       '200':
  #         description: 施錠成功

  # /{lockId}/status:
  #   get:
  #     summary: スマートロックの状態を取得する
  #     security:
  #       - BearerAuth: []
  #     parameters:
  #       - name: lockId
  #         in: path
  #         required: true
  #         schema:
  #           type: string
  #     responses:
  #       '200':
  #         description: 状態取得成功
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/LockStatus'

components:
  response:
    NotFound:
      description: The specified resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    UnprocessableEntity:
      description: The payload contains invalid values.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      properties:
        detail:
          oneOf:
            - type: string
            - type: array
      required:
        - detail

    BikeStatusSchema:
      type: string
      enum:
        - available
        - in_use
        - maintenance
      default: maintenance

    LocationSchema:
      type: object
      required:
        - latitude
        - longitude
      properties:
        latitude:
          type: number
          description: latitude
          minimum: -90
          maximum: 90
        longitude:
          type: number
          description: longitude
          minimum: -180
          maximum: 180

    CreateBikeSchema:
      type: object
      required:
        - location
      properties:
        model:
          type: string
          description: model name
        status:
          $ref: '#/components/schemas/BikeStatusSchema'
        location:
          $ref: '#/components/schemas/LocationSchema'

    GetBikeSchema:
      type: object
      required:
        - bikeId
        - status
        - location
      properties:
        bikeId:
          type: string
          format: uuid
          description: bike ID
        status:
          $ref: '#/components/schemas/BikeStatusSchema'
        location:
          $ref: '#/components/schemas/LocationSchema'

security:
  - BearerAuth:
    - getBikes
    - createBike
    - getBike
    - updateBike
    - deleteBike