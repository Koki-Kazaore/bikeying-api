openapi: 3.0.0
info:
  title: Bikeying API
  version: '1.0'
  description: BikeyingサービスのAPI定義書

servers:
  - url: 'https://api.bikeying.com'

paths:
  /bikes:
    get:
      summary: 自転車の現在の利用ステータスを取得する
      security:
        - BearerAuth: []
      responses:
        '200':
          description: ステータス取得成功
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BikeStatus'
    put:
      summary: 自転車の現在の利用ステータスを更新する
      security:
        - BearerAuth: []
      requestBody:
        description: 更新するステータス情報
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BikeStatusUpdate'
      responses:
        '200':
          description: ステータス更新成功
    post:
      summary: シェアリング可能な自転車を追加する
      security:
        - BearerAuth: []
      requestBody:
        description: 追加する自転車の情報
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Bike'
      responses:
        '201':
          description: 自転車追加成功
    delete:
      summary: 自転車をシェアリングの対象から削除する
      security:
        - BearerAuth: []
      responses:
        '204':
          description: 自転車削除成功

  /bikes/dispatch:
    get:
      summary: ストックされたリクエストから最適な自転車を割り当てる
      security:
        - BearerAuth: []
      responses:
        '200':
          description: 自転車割り当て成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BikeAssignment'

  /bikes/request:
    post:
      summary: ユーザの条件に基づいたリクエストをストックする
      security:
        - BearerAuth: []
      requestBody:
        description: リクエスト情報
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BikeRequest'
      responses:
        '201':
          description: リクエストストック成功

  /bikes/reserve:
    post:
      summary: 特定の自転車の利用を確定・予約する
      security:
        - BearerAuth: []
      requestBody:
        description: 予約情報
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BikeReservation'
      responses:
        '200':
          description: 予約成功

  /users/signup:
    post:
      summary: 新規ユーザ登録
      requestBody:
        description: 登録情報
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSignup'
      responses:
        '201':
          description: ユーザ登録成功

  /users/login:
    post:
      summary: ユーザのログイン処理
      requestBody:
        description: ログイン情報
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: ログイン成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'

  /users/logout:
    post:
      summary: ユーザのログアウト処理
      security:
        - BearerAuth: []
      responses:
        '200':
          description: ログアウト成功

  /users/{userId}:
    get:
      summary: ユーザのプロフィール情報を取得する
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: プロフィール取得成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
    put:
      summary: ユーザのプロフィール情報を更新する
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: 更新するプロフィール情報
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfileUpdate'
      responses:
        '200':
          description: プロフィール更新成功

  /{lockId}/unlock:
    post:
      summary: 指定されたスマートロックを解錠する
      security:
        - BearerAuth: []
      parameters:
        - name: lockId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 解錠成功

  /{lockId}/lock:
    post:
      summary: 指定されたスマートロックを施錠する
      security:
        - BearerAuth: []
      parameters:
        - name: lockId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 施錠成功

  /{lockId}/status:
    get:
      summary: スマートロックの状態を取得する
      security:
        - BearerAuth: []
      parameters:
        - name: lockId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 状態取得成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LockStatus'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    BikeStatusSchema:
      type: string
      enum:
        - available
        - in_use
        - maintenance
      default: maintenance

    LocationSchema:
      type: object
      required:
        - latitude
        - longitude
      properties:
        latitude:
          type: number
          description: latitude
          minimum: -90
          maximum: 90
        longitude:
          type: number
          description: longitude
          minimum: -180
          maximum: 180

    CreateBikeSchema:
      type: object
      required:
        - location
      properties:
        model:
          type: string
          description: model name
        status:
          $ref: '#/components/schemas/BikeStatusSchema'
        location:
          $ref: '#/components/schemas/LocationSchema'

    GetBikeSchema:
      type: object
      required:
        - bikeId
        - status
        - location
      properties:
        bikeId:
          type: string
          format: uuid
          description: bike ID
        status:
          $ref: '#/components/schemas/BikeStatusSchema'
        location:
          $ref: '#/components/schemas/LocationSchema'