openapi: 3.0.3

info:
  title: Bikeying API
  description: API that allows you to enable shared bike services anywhere. Supports bike allocation, usage, user management, and smart lock operation.
  version: 1.0.0

servers:
  - url: http://localhost:8000
    description: URL for local development and testing
  - url: https://bikeying.com
    description: main production server
  - url: https://bikeying-staging.com
    description: staging server for testing purposes only

paths:
  /bikes:
    get:
      summary: Returns a assigned bike
      operationId: getBike
      description: Returns a assigned bike.
      responses:
        '200':
          description: A assigned bike
          content:
            application/json:
              schema:
                type: object
                properties:
                  bikes:
                    type: array
                    items:
                      $ref: '#/components/schemas/GetBikeSchema'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'

  /bikes/request:
    post:
      summary: Stock bike requests
      operationId: stockRequest
      description: >
        Users search for bikes by location and criteria.
        Requests are stocked and assigned later.
      requestBody:
        required: true
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/RequestBikeSchema'
      responses:
        '202':
          description: Indicates that the request has been accepted and stocked.
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestId:
                    type: string
                    example: "req_123456"
                  message:
                    type: string
                    example: "Request successfully accepted and stocked"
        '422':
          $ref: '#/components/responses/UnprocessableEntity'

  /bikes/reserve:
    post:
      summary: Reserve a bike
      operationId: reserveBike
      description: >
        Reserve a bike for a user.
        The bike is locked and reserved for the user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReserveBikeSchema'
      responses:
        '200':
          description: Bike successfully reserved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBikeSchema'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'

components:
  responses:
    NotFound:
      description: The specified resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    UnprocessableEntity:
      description: The payload contains invalid values.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  securitySchemes:
    openId:
      type: openIdConnect
      openIdConnectUrl: https://bikeying.com/.well-known/openid-configuration
    oauth2:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: https://bikeying.com/oauth/token
          scopes: {}
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      properties:
        detail:
          oneOf:
            - type: string
            - type: array
      required:
        - detail

    ReserveBikeSchema:
      type: object
      required:
        - userId
        - bikeId
      properties:
        userId:
          type: string
          example: "123456"
          description: User ID making the reservation
        bikeId:
          type: string
          example: "bike_123456"
          description: Bike ID to reserve

    RequestBikeSchema:
      type: object
      required:
        - userId
        - location
      properties:
        userId:
          type: string
          example: "123456"
          description: User ID making the reservation
        location:
          type: array
          description: Array of latitude and longitude
          items:
            type: number
          minItems: 2
          maxItems: 2
          example: [35.681236, 139.767125]

    GetBikeSchema:
      type: object
      required:
        - bikeId
        - status
        - location
      properties:
        bikeId:
          type: string
          example: "bike_123456"
        status:
          type: string
          example: "available"
        location:
          type: array
          items:
            type: number
          minItems: 2
          maxItems: 2
          example: [35.681236, 139.767125]

security:
  - oauth2:
    - getBike
    - stockRequest
    - reserveBike
  - bearerAuth:
    - getBike
    - stockRequest
    - reserveBike